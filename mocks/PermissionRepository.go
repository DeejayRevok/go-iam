// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	permission "go-uaa/src/domain/permission"

	mock "github.com/stretchr/testify/mock"
)

// PermissionRepository is an autogenerated mock type for the PermissionRepository type
type PermissionRepository struct {
	mock.Mock
}

// FindByNames provides a mock function with given fields: permissionNames
func (_m *PermissionRepository) FindByNames(permissionNames []string) ([]permission.Permission, error) {
	ret := _m.Called(permissionNames)

	var r0 []permission.Permission
	if rf, ok := ret.Get(0).(func([]string) []permission.Permission); ok {
		r0 = rf(permissionNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]permission.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(permissionNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *PermissionRepository) Save(_a0 permission.Permission) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(permission.Permission) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPermissionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPermissionRepository creates a new instance of PermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPermissionRepository(t mockConstructorTestingTNewPermissionRepository) *PermissionRepository {
	mock := &PermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
