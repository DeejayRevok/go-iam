// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	user "go-uaa/src/domain/user"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserPasswordResetRepository is an autogenerated mock type for the UserPasswordResetRepository type
type UserPasswordResetRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userPasswordReset
func (_m *UserPasswordResetRepository) Delete(userPasswordReset user.UserPasswordReset) error {
	ret := _m.Called(userPasswordReset)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.UserPasswordReset) error); ok {
		r0 = rf(userPasswordReset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUserID provides a mock function with given fields: userID
func (_m *UserPasswordResetRepository) FindByUserID(userID uuid.UUID) (*user.UserPasswordReset, error) {
	ret := _m.Called(userID)

	var r0 *user.UserPasswordReset
	if rf, ok := ret.Get(0).(func(uuid.UUID) *user.UserPasswordReset); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserPasswordReset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: userPasswordReset
func (_m *UserPasswordResetRepository) Save(userPasswordReset user.UserPasswordReset) error {
	ret := _m.Called(userPasswordReset)

	var r0 error
	if rf, ok := ret.Get(0).(func(user.UserPasswordReset) error); ok {
		r0 = rf(userPasswordReset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserPasswordResetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserPasswordResetRepository creates a new instance of UserPasswordResetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserPasswordResetRepository(t mockConstructorTestingTNewUserPasswordResetRepository) *UserPasswordResetRepository {
	mock := &UserPasswordResetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
