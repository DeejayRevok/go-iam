// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	thirdParty "go-iam/src/domain/auth/thirdParty"

	mock "github.com/stretchr/testify/mock"
)

// ThirdPartyTokensFetcherFactory is an autogenerated mock type for the ThirdPartyTokensFetcherFactory type
type ThirdPartyTokensFetcherFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: provider
func (_m *ThirdPartyTokensFetcherFactory) Create(provider string) (thirdParty.ThirdPartyTokensFetcher, error) {
	ret := _m.Called(provider)

	var r0 thirdParty.ThirdPartyTokensFetcher
	if rf, ok := ret.Get(0).(func(string) thirdParty.ThirdPartyTokensFetcher); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(thirdParty.ThirdPartyTokensFetcher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewThirdPartyTokensFetcherFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewThirdPartyTokensFetcherFactory creates a new instance of ThirdPartyTokensFetcherFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewThirdPartyTokensFetcherFactory(t mockConstructorTestingTNewThirdPartyTokensFetcherFactory) *ThirdPartyTokensFetcherFactory {
	mock := &ThirdPartyTokensFetcherFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
